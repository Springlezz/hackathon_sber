import { request } from 'https';
import { dbAll, dbGet, dbRun } from './db.js';

const TELEGRAM_TOKEN = '********************************************';

function botApi(name, data) {
    return new Promise(function(resolve, reject) {
        const req = request({
            method: 'POST',
            host: 'api.telegram.org',
            path: `/bot${TELEGRAM_TOKEN}/${name}`,
            headers: { 'Content-Type': 'application/json' }
        }, function(res) {
            res.setEncoding('utf8');
            let body = '';
            res.on('data', chunk => body += chunk);
            res.on('end', () => resolve(JSON.parse(body)));
        });
        req.on('error', reject);
        req.end(JSON.stringify(data));
    });
}

function sendMessage(chatId, text) {
    return botApi('sendMessage', { chat_id: chatId, text, parse_mode: 'HTML' });
}
function sendMessageWithKeyboard(chatId, text) {
    return botApi('sendMessage', {
        chat_id: chatId, text, parse_mode: 'HTML', reply_markup: {
            keyboard: [
                ['üë§ –û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'],
                ['üéâ –°–æ–±—ã—Ç–∏—è'],
                ['‚ùå –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç']
            ]
        }
    });
}
export function sendEvent(userId, event) {
    const message = `<b>${event.title}</b>
–ú–µ—Å—Ç–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: ${event.location}
–í—Ä–µ–º—è: ${new Date(event.time).toLocaleString('ru', { hour: '2-digit', minute: '2-digit', day: '2-digit', month: '2-digit', year: 'numeric' })}
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${event.duration / 60} –º–∏–Ω—É—Ç

${event.description}`;
    sendMessageWithKeyboard(userId, message);
}

export default async function initTelegramBot(db) {
    let offset = 0;
    while (true) {
        const { ok, result } = await botApi('getUpdates', { offset, timeout: 5000 });
        if (ok) {
            offset += result.length;
            for (const { update_id, message } of result) {
                dbGet(db, 'SELECT * FROM users WHERE telegram = ?', message.from.id).then(async function([user]) {
                    switch (message.text) {
                        case '/start':
                            await (user ? sendMessageWithKeyboard : sendMessage)(message.chat.id, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>${message.from.first_name}üéä</b>! –Ø - <b>–ë–æ—Ç –•–∞–∫–∞—Ç–æ–Ω–∞ v0\u00ad.0\u00ad.¬≠0\u00ad.0.\u00ad0.\u00ad0.\u00ad0.\u00ad1 beta</b> –¥–ª—è "–ö—Ä–æ–Ω–∞"‚ú®.\n–ë—É–¥—É –≤–∞—à–∏–º –≤–µ—Ä–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º! ‚ù§Ô∏è` + (user ? '' : `\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¢–µ–ª–µ–≥—Ä–∞–º–∞ –∫ —Å–∞–π—Ç—É ‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è <i>—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç</i>.`));
                            break;
                        case 'üë§ –û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ':
                            if (!user) return sendMessage(message.chat.id, '‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É.');
                            sendMessageWithKeyboard(message.chat.id, `<u><b>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b></u>
<b>üë§ –§–ò–û:</b> ${user.first_name} ${user.second_name} ${user.third_name}
<b>‚úâÔ∏è –ü–æ—á—Ç–∞:</b> ${user.email ?? '&lt;–Ω–µ—Ç&gt;'}
<b>üíÅ‚Äç‚ôÇÔ∏è –†–æ–ª—å:</b> ${['üë§ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'üëë —Ä–µ–∑–∏–¥–µ–Ω—Ç', 'üë®‚Äçüíª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'][user.role]}
<b>üèô –ì–æ—Ä–æ–¥:</b> ${user.city}
<b>üåç –°—Ç—Ä–∞–Ω–∞:</b> ${user.country}`, { parse_mode: 'HTML' });
                            break;
                        case 'üéâ –°–æ–±—ã—Ç–∏—è':
                            if (!user) return sendMessage(message.chat.id, '‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É.');
                            dbAll(db, 'SELECT * FROM events JOIN event_users ON event_users.event_id = events.id WHERE event_users.user_id = ?', user.id).then(function([events]) {
                                if (events.length === 0) return sendMessage(message.chat.id, '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.');
                                for (const event of events) {
                                    sendEvent(message.chat.id, event);
                                }
                            });
                            break;
                        case '‚ùå –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç':
                            if (!user) return sendMessage(message.chat.id, '‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É.');
                            if (user.password === null) return sendMessageWithKeyboard(message.chat.id, '‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –±–µ–∑ –ø–∞—Ä–æ–ª—è.');
                            dbRun(db, 'UPDATE users SET telegram = NULL WHERE id = ?', user.id);
                            sendMessage(message.chat.id, '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.');
                            break;
                        default:
                            if (/^[0-9a-f]{32}$/.test(message.text)) {
                                dbGet(db, 'SELECT type, telegram FROM telegram_auth WHERE code = ?', message.text).then(async function([auth]) {
                                    if (!auth) return sendMessage(message.chat.id, '‚ö†Ô∏è –ö–æ–¥ –Ω–µ–¥–µ–∏ÃÜ—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.');
                                    if (auth.telegram !== null) return sendMessage(message.chat.id, '‚ö†Ô∏è –í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥.');
                                    if (auth.type === 1) { // register
                                        const [user] = await dbGet(db, 'SELECT id FROM users WHERE telegram = ?', message.from.id);
                                        if (user) return sendMessageWithKeyboard(message.chat.id, '‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É.');
                                    }
                                    await dbRun(db, 'UPDATE telegram_auth SET telegram = ? WHERE code = ?', message.from.id, message.text);
                                    sendMessageWithKeyboard(message.chat.id, `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ ${['–≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É', '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å'][auth.type]}.–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è`);
                                });
                            }
                            else (user ? sendMessageWithKeyboard : sendMessage)(message.chat.id, 'ü§∑‚Äç‚ôÇÔ∏è –Ø –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–∏—Ç—å.');
                    }
                });
                offset = update_id + 1;
            }
        }
    }
};
